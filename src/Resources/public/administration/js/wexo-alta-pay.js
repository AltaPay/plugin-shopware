!function(){var e={10:function(){let e=Shopware.Classes.ApiService,{Application:t}=Shopware;class a extends e{getPayments(t){return this.httpClient.get(`/${this.getApiBasePath()}/payments?orderId=${t}`,{headers:this.getBasicHeaders()}).then(t=>e.handleResponse(t))}capture(t,a){return this.httpClient.post(`/${this.getApiBasePath()}/capture`,{orderId:t,captureAmount:a},{headers:this.getBasicHeaders()}).then(t=>e.handleResponse(t))}refund(t){return this.httpClient.post(`/${this.getApiBasePath()}/refund`,{orderId:t},{headers:this.getBasicHeaders()}).then(t=>e.handleResponse(t))}cancel(t){return this.httpClient.post(`/${this.getApiBasePath()}/cancel`,{orderId:t},{headers:this.getBasicHeaders()}).then(t=>e.handleResponse(t))}}t.addServiceProvider("altaPayService",e=>new a(t.getContainer("init").httpClient,e.loginService,"altapay"))}},t={};function a(n){var r=t[n];if(void 0!==r)return r.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,a),s.exports}a.p="bundles/wexoaltapay/",window?.__sw__?.assetPath&&(a.p=window.__sw__.assetPath+"/bundles/wexoaltapay/"),function(){"use strict";Shopware.Component.override("sw-order-detail",{template:'{% block sw_order_detail_content_tabs_extension %}\n    <sw-tabs-item\n            v-if="!isOrderEditing && altaPayTransactionId"\n            class="sw-order-detail__tabs-tab-altaPay"\n            :route="{ name: \'sw.order.detail.altaPay\', params: { id: $route.params.id } }"\n            :title="$tc(\'altaPay.tabDetails\')"\n    >\n            {{ $tc(\'altaPay.tabDetails\') }}\n    </sw-tabs-item>\n{% endblock %}\n',computed:{altaPayTransactionId(){return this.order?.customFields?.wexoAltaPayTransactionId}}});let{mapGetters:e,mapState:t}=Shopware.Component.getComponentHelper(),{State:n}=Shopware;Shopware.Component.register("sw-order-detail-altapay",{template:'<sw-card title="AltaPay Status" :isLoading="isLoading" positionIdentifier="altapay">\n    <sw-card-section v-if="transaction">\n        <sw-container columns="1fr 1fr" gap="10px">\n            <div>Transaction ID:</div>\n            <div>{{ transaction.TransactionId }}</div>\n            <div>Payment ID:</div>\n            <div>{{ transaction.PaymentId }}</div>\n            <div>Transaction Status:</div>\n            <div>{{ transaction.TransactionStatus }}</div>\n            <div>Reserved Amount:</div>\n            <div>{{ transaction.ReservedAmount }} {{ transaction.MerchantCurrencyAlpha }}</div>\n            <div>Captured Amount:</div>\n            <div>{{ transaction.CapturedAmount }} {{ transaction.MerchantCurrencyAlpha }}</div>\n            <div>Refunded Amount:</div>\n            <div>{{ transaction.RefundedAmount }} {{ transaction.MerchantCurrencyAlpha }}</div>\n            <div>3D Secure:</div>\n            <div>{{ transaction.ThreeDSecureResult }}</div>\n            <div>Created:</div>\n            <div>{{ transaction.CreatedDate }}</div>\n            <div>Last updated:</div>\n            <div>{{ transaction.UpdatedDate }}</div>\n        </sw-container>\n    </sw-card-section>\n    <sw-card-section v-if="transaction">\n            <sw-container columns="1fr 1fr 1fr" gap="10px" align="center">\n                <div style="display: flex;justify-content: center;gap: 25px;">\n                    <sw-button :disabled="isLoading || transaction.ReservedAmount === transaction.CapturedAmount" @click="openCaptureModal">{{ $tc("altaPay.capture") }}</sw-button>\n                    <sw-button :disabled="isLoading || transactionSource.transactions[0].stateMachineState.technicalName !== \'paid\'" @click="refund">{{ $tc("altaPay.refund") }}</sw-button>\n                    <sw-button :disabled="isLoading || ![\'open\', \'in_progress\', \'authorized\'].includes(transactionSource.transactions[0].stateMachineState.technicalName)" @click="cancel">{{ $tc("altaPay.cancel") }}</sw-button>\n                    <sw-modal v-if="showCaptureModal" @modal-close="closeCaptureModal" :title="$tc(\'altaPay.capture\')"\n                              variant="small">\n                        <div>\n                            <div>Amount:</div>\n                            <sw-number-field type="captureAmount"\n                                             numberType="float"\n                                             :allowEmpty="false"\n                                             v-model:value="captureAmount"\n                                             placeholder="Amount">\n                            </sw-number-field>\n                            <p v-if="successMessage" class="sw-field__success" style="color: #29de3b;">\n                                {{ successMessage }}\n                            </p>\n                            <p v-if="errorMessage" class="sw-field__error" style="color: #de294c;">\n                                {{ errorMessage }}\n                            </p>\n                        </div>\n                        <template #modal-footer>\n                            <sw-button @click="closeCaptureModal" size="small">\n                                {{ $tc(\'global.default.cancel\') }}\n                            </sw-button>\n\n                            <sw-button @click="capture" variant="primary" size="small" :isLoading="isLoadingCapture">\n                                {{ $tc("altaPay.capture") }}\n                            </sw-button>\n                        </template>\n                    </sw-modal>\n                </div>\n            </sw-container>\n    </sw-card-section>\n</sw-card>\n',inject:["altaPayService"],computed:{...t("swOrderDetail",["order"]),orderDetails(){try{if(!(Shopware?.Context?.app?.config?.version??"").startsWith("6.6"))return Shopware.Store.get("swOrderDetail").order}catch(e){console.log("swOrderDetail store not found:",e)}},orderId(){return this.orderDetails?.id||this.order?.id||null},transactionSource(){return this.orderDetails||this.order||null}},metaInfo(){return{title:"AltaPay"}},data(){return{transaction:null,captureAmount:0,isLoadingCapture:!1,showCaptureModal:!1,errorMessage:"",successMessage:""}},methods:{createdComponent(){n.commit("swOrderDetail/setLoading",["order",!0]),this.altaPayService.getPayments(this.orderId).then(e=>{this.transaction=e.Body.Transactions.Transaction}).finally(()=>{n.commit("swOrderDetail/setLoading",["order",!1])})},capture(){n.commit("swOrderDetail/setLoading",["order",!0]),this.altaPayService.capture(this.orderId,this.captureAmount).then(e=>{if("Error"===e.Body.Result){this.errorMessage=e.Body.MerchantErrorMessage;return}this.successMessage="Captured successfully.",this.transaction=e.Body.Transactions.Transaction,this.$emit("save-edits")}).finally(()=>{setTimeout(()=>{this.closeCaptureModal(),n.commit("swOrderDetail/setLoading",["order",!1])},1e3)})},refund(){n.commit("swOrderDetail/setLoading",["order",!0]),this.altaPayService.refund(this.orderId).then(e=>{this.transaction=e.Body.Transactions.Transaction,this.$emit("save-edits")}).finally(()=>{n.commit("swOrderDetail/setLoading",["order",!1])})},cancel(){n.commit("swOrderDetail/setLoading",["order",!0]),this.altaPayService.cancel(this.orderId).then(e=>{this.transaction=e.Body.Transactions.Transaction,this.$emit("save-edits")}).finally(()=>{n.commit("swOrderDetail/setLoading",["order",!1])})},openCaptureModal(){this.captureAmount=this.transaction.ReservedAmount-this.transaction.CapturedAmount,this.showCaptureModal=!0},closeCaptureModal(){this.showCaptureModal=!1,this.errorMessage="",this.successMessage=""}},created(){this.createdComponent()}}),a(10),Shopware.Module.register("wexo-altapay",{routeMiddleware(e,t){let a="sw.order.detail.altaPay";"sw.order.detail"===t.name&&t.children.every(e=>e.name!==a)&&t.children.push({name:a,path:"/sw/order/detail/:id/altapay",component:"sw-order-detail-altapay",meta:{parentPath:"sw.order.index"}}),e(t)}}),Shopware.Locale.extend("da-DK",{altaPay:{tabDetails:"AltaPay",capture:"H\xe6v",refund:"Refunder",cancel:"Annuller"}}),Shopware.Locale.extend("en-GB",{altaPay:{tabDetails:"AltaPay",capture:"Capture",refund:"Refund",cancel:"Cancel"}}),Shopware.Locale.extend("de-DE",{altaPay:{tabDetails:"AltaPay",capture:"Einfangen",refund:"R\xfcckerstattung",cancel:"Annullieren"}})}()}();