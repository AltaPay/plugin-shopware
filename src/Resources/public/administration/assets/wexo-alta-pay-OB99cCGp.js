const d=`{% block sw_order_detail_content_tabs_extension %} <sw-tabs-item v-if="!isOrderEditing && altaPayTransactionId" class="sw-order-detail__tabs-tab-altaPay" :route="{ name: 'sw.order.detail.altaPay', params: { id: $route.params.id } }" :title="$tc('altaPay.tabDetails')" > {{ $tc('altaPay.tabDetails') }} </sw-tabs-item> {% endblock %}`;Shopware.Component.override("sw-order-detail",{template:d,computed:{altaPayTransactionId(){var t,e;return(e=(t=this.order)==null?void 0:t.customFields)==null?void 0:e.wexoAltaPayTransactionId}}});const o=`<sw-card title="AltaPay Status" :isLoading="isLoading" positionIdentifier="altapay"> <sw-card-section v-if="transaction"> <sw-container columns="1fr 1fr" gap="10px"> <div>Transaction ID:</div> <div>{{ transaction.TransactionId }}</div> <div>Payment ID:</div> <div>{{ transaction.PaymentId }}</div> <div>Transaction Status:</div> <div>{{ transaction.TransactionStatus }}</div> <div>Reserved Amount:</div> <div>{{ transaction.ReservedAmount }} {{ transaction.MerchantCurrencyAlpha }}</div> <div>Captured Amount:</div> <div>{{ transaction.CapturedAmount }} {{ transaction.MerchantCurrencyAlpha }}</div> <div>Refunded Amount:</div> <div>{{ transaction.RefundedAmount }} {{ transaction.MerchantCurrencyAlpha }}</div> <div>3D Secure:</div> <div>{{ transaction.ThreeDSecureResult }}</div> <div>Created:</div> <div>{{ transaction.CreatedDate }}</div> <div>Last updated:</div> <div>{{ transaction.UpdatedDate }}</div> </sw-container> </sw-card-section> <sw-card-section v-if="transaction"> <sw-container columns="1fr 1fr 1fr" gap="10px" align="center"> <div style="display: flex;justify-content: center;gap: 25px;"> <sw-button :disabled="isLoading || !['open', 'in_progress', 'authorized'].includes(order.transactions[0].stateMachineState.technicalName)" @click="capture">{{ $tc("altaPay.capture") }}</sw-button> <sw-button :disabled="isLoading || order.transactions[0].stateMachineState.technicalName !== 'paid'" @click="refund">{{ $tc("altaPay.refund") }}</sw-button> <sw-button :disabled="isLoading || !['open', 'in_progress', 'authorized'].includes(order.transactions[0].stateMachineState.technicalName)" @click="cancel">{{ $tc("altaPay.cancel") }}</sw-button> </div> </sw-container> </sw-card-section> </sw-card>`,{mapVuexGetters:c,mapVuexState:p}=Shopware.Component.getComponentHelper(),{State:i}=Shopware;Shopware.Component.register("sw-order-detail-altapay",{template:o,inject:["altaPayService"],computed:{...c("swOrderDetail",["isLoading"]),order(){return Shopware.Store.get("swOrderDetail").order}},metaInfo(){return{title:"AltaPay"}},data(){return{transaction:null}},methods:{createdComponent(){i.commit("swOrderDetail/setLoading",["order",!0]),this.altaPayService.getPayments(this.order.id).then(t=>{this.transaction=t.Body.Transactions.Transaction}).finally(()=>{i.commit("swOrderDetail/setLoading",["order",!1])})},capture(){i.commit("swOrderDetail/setLoading",["order",!0]),this.altaPayService.capture(this.order.id).then(t=>{this.transaction=t.Body.Transactions.Transaction,this.$emit("save-edits")}).finally(()=>{i.commit("swOrderDetail/setLoading",["order",!1])})},refund(){i.commit("swOrderDetail/setLoading",["order",!0]),this.altaPayService.refund(this.order.id).then(t=>{this.transaction=t.Body.Transactions.Transaction,this.$emit("save-edits")}).finally(()=>{i.commit("swOrderDetail/setLoading",["order",!1])})},cancel(){i.commit("swOrderDetail/setLoading",["order",!0]),this.altaPayService.cancel(this.order.id).then(t=>{this.transaction=t.Body.Transactions.Transaction,this.$emit("save-edits")}).finally(()=>{i.commit("swOrderDetail/setLoading",["order",!1])})}},created(){this.createdComponent()}});const n=Shopware.Classes.ApiService,{Application:r}=Shopware;class l extends n{getPayments(e){return this.httpClient.get(`/${this.getApiBasePath()}/payments?orderId=${e}`,{headers:this.getBasicHeaders()}).then(a=>n.handleResponse(a))}capture(e){return this.httpClient.post(`/${this.getApiBasePath()}/capture`,{orderId:e},{headers:this.getBasicHeaders()}).then(a=>n.handleResponse(a))}refund(e){return this.httpClient.post(`/${this.getApiBasePath()}/refund`,{orderId:e},{headers:this.getBasicHeaders()}).then(a=>n.handleResponse(a))}cancel(e){return this.httpClient.post(`/${this.getApiBasePath()}/cancel`,{orderId:e},{headers:this.getBasicHeaders()}).then(a=>n.handleResponse(a))}}r.addServiceProvider("altaPayService",t=>{const e=r.getContainer("init");return new l(e.httpClient,t.loginService,"altapay")});Shopware.Module.register("wexo-altapay",{routeMiddleware(t,e){const a="sw.order.detail.altaPay";e.name==="sw.order.detail"&&e.children.every(s=>s.name!==a)&&e.children.push({name:a,path:"/sw/order/detail/:id/altapay",component:"sw-order-detail-altapay",meta:{parentPath:"sw.order.index"}}),t(e)}});Shopware.Locale.extend("da-DK",{altaPay:{tabDetails:"AltaPay",capture:"Hæv",refund:"Refunder",cancel:"Annuller"}});Shopware.Locale.extend("en-GB",{altaPay:{tabDetails:"AltaPay",capture:"Capture",refund:"Refund",cancel:"Cancel"}});Shopware.Locale.extend("de-DE",{altaPay:{tabDetails:"AltaPay",capture:"Einfangen",refund:"Rückerstattung",cancel:"Annullieren"}});
//# sourceMappingURL=wexo-alta-pay-OB99cCGp.js.map
